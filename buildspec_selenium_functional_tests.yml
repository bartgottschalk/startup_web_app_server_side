version: 0.2

env:
  variables:
    AWS_DEFAULT_REGION: "us-west-2"

    NGINX_localliveservertestcase_part1: |
      server {
        listen 80;
        server_name localliveservertestcase.startupwebapp.com;
        index index.html;
        error_page 404 /error.html;
        default_type text/html;
        try_files $uri /error.html =404;
        location / {
            root 

    NGINX_localliveservertestcase_part2: ";}}"

    SETTINGS_SECRET_SRC: |
      SECRET_KEY = 'uM*&2lhajwrgp9823rkjnAui6724p029u#lkXrCTqmOS0gMnX'

      ALLOWED_HOSTS = ['localapi.startupwebapp.com', 'localliveservertestcaseapi.startupwebapp.com']

      SESSION_COOKIE_SECURE = False
      SESSION_COOKIE_DOMAIN = "localapi.startupwebapp.com"

      CSRF_COOKIE_SECURE = False
      CSRF_TRUSTED_ORIGINS = "localhost.startupwebapp.com"

      DEBUG = True

      ENVIRONMENT_DOMAIN = 'http://localhost.startupwebapp.com'

      EMAIL_HOST_USER = 'AKIAJOVIUIENKNYU56ZA'
      EMAIL_HOST_PASSWORD = 'BBlkKh47UslsZxbarkx666TSC7wkpYMLCZXdsxwxsck4'

      DATABASES = {
          'default': {
              'ENGINE': 'django.db.backends.sqlite3',
              'NAME': 'swa_unittest',
              'USER': 'django_unittest',
              'PASSWORD': 'imatester',
              'HOST': '127.0.0.1',
          }
      }

      S3_QR_IMAGE_BUCKET_PATH = 'food/qr/local/'
      S3_ORDER_PDF_BUCKET_PATH = 'pdf/local/'
      S3_FOOD_IMAGE_BUCKET_PATH = 'food/main/local/'

      STRIPE_SERVER_SECRET_KEY = 'sk_test_123'
      STRIPE_PUBLISHABLE_SECRET_KEY = 'pk_test_123'
      STRIPE_LOG_LEVEL = 'debug'

      # CORS Config
      CORS_ORIGIN_WHITELIST = (
          'localliveservertestcase.startupwebapp.com',
          'localhost.startupwebapp.com',
      )

phases:
  install:
    commands:

  pre_build:
    commands:
      # setup static web client hosting on nginx
      - echo $CODEBUILD_SRC_DIR_StaticWebClient
      - echo $CODEBUILD_SRC_DIR
      - ls -l $CODEBUILD_SRC_DIR_StaticWebClient
      - ls -l $CODEBUILD_SRC_DIR

      - ls -l /etc/nginx
      - ls -l /etc/nginx/sites-available
      - ls -l /etc/nginx/sites-enabled

      - echo $NGINX_localliveservertestcase_part1 > /etc/nginx/sites-available/localliveservertestcase.startupwebapp.com
      - echo $CODEBUILD_SRC_DIR_StaticWebClient >> /etc/nginx/sites-available/localliveservertestcase.startupwebapp.com
      - echo $NGINX_localliveservertestcase_part2 >> /etc/nginx/sites-available/localliveservertestcase.startupwebapp.com
      - cat /etc/nginx/sites-available/localliveservertestcase.startupwebapp.com

      - export SITENAME=localliveservertestcase.startupwebapp.com
      - cd /etc/nginx/sites-enabled
      - sudo ln -s /etc/nginx/sites-available/$SITENAME $SITENAME
      - readlink -f $SITENAME
      - sudo rm /etc/nginx/sites-enabled/default
      - sudo service nginx restart
      - cat /var/log/nginx/error.log

      # setup django test app
      - cd $CODEBUILD_SRC_DIR
      - cd StartupWebApp/StartupWebApp
      - echo "$SETTINGS_SECRET_SRC" > settings_secret.py

      # setup hosts file for both static web app served by nginx and for django test app
      #- cat /etc/hosts
      - echo "127.0.0.1       localliveservertestcase.startupwebapp.com" >> /etc/hosts
      - echo "127.0.0.1       localliveservertestcaseapi.startupwebapp.com" >> /etc/hosts
      #- cat /etc/hosts

      - cp -r /mnt/aws ~/.aws
      
  build:
    commands:
      - echo Build started on `date`
      - cd $CODEBUILD_SRC_DIR
      - cd StartupWebApp

      # functions tests
      - python3 manage.py test functional_tests
      #- python3 manage.py test functional_tests/about

  post_build:
    commands:
      - cat geckodriver.log
      - cat /var/log/nginx/error.log

      - echo Build completed on `date`

artifacts:
  files:
